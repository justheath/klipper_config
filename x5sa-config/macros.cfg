# ------------------------- Filament Change --------------------------
# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    ;G91
    ;G1 E-.8 F2700
    ;G1 Z{Z}
    ;G90
    ;G1 X{X} Y{Y} F3000
    ;G91
    ;G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state
# --------------------------------------------------------------------

# --------------------------------------------------------------------

# ------------------Map G29 to load the default mesh profile ---------
[gcode_macro G29]
description: Load default mesh profile
gcode:
  BED_MESH_PROFILE LOAD=default

# --------------------------------------------------------------------

# --------------------Turn Fan On-------------------------------------
[gcode_macro PART_COOLING_FAN_ON]
gcode:
    M106 S255

# --------------------Turn Fan Off------------------------------------

[gcode_macro PART_COOLING_FAN_OFF]
gcode:
    M106 S0

# --------------------------------------------------------------------

# --------------------Prime the Nozzle - Draw lines-------------------
[gcode_macro PRIME_EXTRUDER]
description: Move to left and draw a line to prime extruder
gcode:
    SAVE_GCODE_STATE NAME=prime_extruder_state
    # Reset Extruder
    G92 E0
    # Move Z Axis up
    G1 Z2.0 F3000
    # Move to start position - up front on lifter
    G1 X92 Y-15 Z0.28 F5000.0
    # Draw the first line
    G1 X217 Y-15 Z0.28 F1500.0 E15
    # Move to side a little
    G1 X217 Y-15.3 Z0.28 F5000.0
    # Draw the second line
    G1 X92 Y-15.3 Z0.28 F1500.0 E30
    
    # Move to start position - along the left side
    # G1 X6.1 Y20 Z0.28 F5000.0
    # Draw the first line
    # G1 X6.1 Y200.0 Z0.28 F1500.0 E15
    # Move to side a little
    # G1 X6.4 Y200.0 Z0.28 F5000.0
    # Draw the second line
    # G1 X6.4 Y20 Z0.28 F1500.0 E30
    # Reset Extruder
    
    G92 E0
    # Move up, over, and retract a bit
    G1 X15 Z4.0 E-2 F3000
    RESTORE_GCODE_STATE NAME=prime_extruder_state
    M117 And we're off!

# --------------------------------------------------------------------

# -------------Things to do at Start - Referenced by Slicer-----------
[gcode_macro START_PRINT]
variable_bed_temp: 60
variable_extruder_temp: 200
gcode:
    # Home the printer
    G28
    # Load Mesh Bed Level
    G29
    # Start bed heating
    M117 Heating bed
    M140 S{bed_temp}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    # Sets current position as "virtual" 0 for future commands
    SET_GCODE_OFFSET Z=0.0
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Wait for bed to reach temperature
    M190 S{bed_temp}
    # Start nozzle heating
    M117 Heating nozzle
    M104 S{extruder_temp}
    # Set and wait for nozzle to reach temperature
    M109 S{extruder_temp}
    # Prime line
    PRIME_EXTRUDER

# --------------------------------------------------------------------

# -------------Things to do at End - Referenced by Slicer-------------
[gcode_macro END_PRINT]
description: Stuff to do when the print is done
variable_machine_depth: 295
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Relative positionning
    G91
    # Retract and raise Z
    G1 Z0.2 E-4 F2400
    # Wipe out
    G1 X5 Y5 F3000
    # Raise Z more
    G1 Z30
    # Absolute positioning
    G90
    # Present print
    G1 X0 Y{machine_depth}
    # Disable steppers
    M84

# --------------------------------------------------------------------
[gcode_macro LOAD_FILAMENT]
description: Load 50mm of filament
variable_extruder_temp: 200
gcode:
  {% if printer.print_stats.state == "standby" %}
    G90
      G0 X50 Y0 Z10              #move to area where can easily load filament
      M109 S{extruder_temp}      #set hotend temperature and wait
      M83                        #relative positioning on extruder    
      G0 E50 F400  #prime extruder
      G92 E0
  {% else %}
    { printer.gcode.action_respond_info("Load Filament is disabled while printing!") }
  {% endif %}

# --------------------------------------------------------------------

# Macro to Unload Filament
[gcode_macro UNLOAD_FILAMENT]
variable_extruder_temp: 200
description: Unload 50mm of filament
gcode:
  {% if printer.print_stats.state == "standby" %}
    G0 X50 Y0 Z10                   #move to area where can easily load filament
    M109 S{extruder_temp}           #set hotend temperature and wait    
    M83                             #relative positioning on extruder
     G0 E5 F400                     #extrude filament to get better blob on end
     G0 E-50 F1000     #retract filament back to extruder
     G92 E0
   {% else %}
     { printer.gcode.action_respond_info("Unload Filament is disabled while printing!") }
   {% endif %}

# --------------------------------------------------------------------
[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
# --------------------------------------------------------------------
[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    
# --------------------------------------------------------------------
